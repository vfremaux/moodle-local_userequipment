{"version":3,"sources":["../src/activitychooser.js"],"names":["ACTIVITIESRESOURCES","init","courseId","chooserConfig","pendingPromise","Pending","registerListenerEvents","resolve","events","CustomEvents","activate","keyboardActivate","fetchModuleData","innerPromise","Promise","Repository","activityModules","fetchFooterData","footerInnerPromise","sectionId","define","document","forEach","event","addEventListener","e","target","closest","selectors","elements","sectionmodchooser","sectionDiv","section","button","hasAttribute","caller","bodyPromise","bodyPromiseResolver","dataset","sectionid","footerData","sectionModal","buildModal","data","builtModuleData","sectionIdMapper","ChooserDialogue","displayChooser","partiallyAppliedFavouriteManager","Templates","render","templateDataBuilder","webServiceData","id","newData","JSON","parse","stringify","content_items","module","link","activities","resources","showAll","showActivities","showResources","tabMode","parseInt","tabmode","favourites","filter","mod","favourite","recommended","archetype","favouritesFirst","length","activitiesFirst","fallback","footer","ModalFactory","create","type","types","DEFAULT","title","body","customfootertemplate","large","templateContext","classes","then","modal","show","nullFavouriteDomManager","favouriteTabNav","modalBody","tabIndex","classList","add","contains","remove","setAttribute","favouriteTab","querySelector","regions","defaultTabNav","activitiesTabNav","activityTabNav","focus","defaultTab","activitiesTab","activityTab","moduleData","internal","favouriteArea","favouriteButtons","querySelectorAll","actions","optionActions","manageFavourite","result","find","name","newFaves","builtFaves","renderForPromise","html","js","replaceNodeContents","Array","from","element","favourited","firstElementChild","nodeToRemove","parentNode","removeChild"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A type of dialogue used as for choosing modules in a course.\r\n *\r\n * @module     core_course/activitychooser\r\n * @package    core_course\r\n * @copyright  2020 Mathew May <mathew.solutions>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as ChooserDialogue from 'core_course/local/activitychooser/dialogue';\r\nimport * as Repository from 'core_course/local/activitychooser/repository';\r\nimport selectors from 'core_course/local/activitychooser/selectors';\r\nimport CustomEvents from 'core/custom_interaction_events';\r\nimport * as Templates from 'core/templates';\r\nimport * as ModalFactory from 'core/modal_factory';\r\nimport {get_string as getString} from 'core/str';\r\nimport Pending from 'core/pending';\r\n\r\n// Set up some JS module wide constants that can be added to in the future.\r\n\r\n// Tab config options.\r\nconst ALLACTIVITIESRESOURCES = 0;\r\nconst ONLYALL = 1;\r\nconst ACTIVITIESRESOURCES = 2;\r\n\r\n// Module types.\r\nconst ACTIVITY = 0;\r\nconst RESOURCE = 1;\r\n\r\n/**\r\n * Set up the activity chooser.\r\n *\r\n * @method init\r\n * @param {Number} courseId Course ID to use later on in fetchModules()\r\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\r\n */\r\nexport const init = (courseId, chooserConfig) => {\r\n    const pendingPromise = new Pending();\r\n\r\n    registerListenerEvents(courseId, chooserConfig);\r\n\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Once a selection has been made make the modal & module information and pass it along\r\n *\r\n * @method registerListenerEvents\r\n * @param {Number} courseId\r\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\r\n */\r\nconst registerListenerEvents = (courseId, chooserConfig) => {\r\n    const events = [\r\n        'click',\r\n        CustomEvents.events.activate,\r\n        CustomEvents.events.keyboardActivate\r\n    ];\r\n\r\n    const fetchModuleData = (() => {\r\n        let innerPromise = null;\r\n\r\n        return () => {\r\n            if (!innerPromise) {\r\n                innerPromise = new Promise((resolve) => {\r\n                    resolve(Repository.activityModules(courseId));\r\n                });\r\n            }\r\n\r\n            return innerPromise;\r\n        };\r\n    })();\r\n\r\n    const fetchFooterData = (() => {\r\n        let footerInnerPromise = null;\r\n\r\n        return (sectionId) => {\r\n            if (!footerInnerPromise) {\r\n                footerInnerPromise = new Promise((resolve) => {\r\n                    resolve(Repository.fetchFooterData(courseId, sectionId));\r\n                });\r\n            }\r\n\r\n            return footerInnerPromise;\r\n        };\r\n    })();\r\n\r\n    CustomEvents.define(document, events);\r\n\r\n    // Display module chooser event listeners.\r\n    events.forEach((event) => {\r\n        document.addEventListener(event, async(e) => {\r\n            if (e.target.closest(selectors.elements.sectionmodchooser)) {\r\n                let caller;\r\n                // We need to know who called this.\r\n                // Standard courses use the ID in the main section info.\r\n                const sectionDiv = e.target.closest(selectors.elements.section);\r\n                // Front page courses need some special handling.\r\n                const button = e.target.closest(selectors.elements.sectionmodchooser);\r\n\r\n                // If we don't have a section ID use the fallback ID.\r\n                // We always want the sectionDiv caller first as it keeps track of section ID's after DnD changes.\r\n                // The button attribute is always just a fallback for us as the section div is not always available.\r\n                // A YUI change could be done maybe to only update the button attribute but we are going for minimal change here.\r\n                if (sectionDiv !== null && sectionDiv.hasAttribute('data-sectionid')) {\r\n                    // We check for attributes just in case of outdated contrib course formats.\r\n                    caller = sectionDiv;\r\n                } else {\r\n                    caller = button;\r\n                }\r\n\r\n                // We want to show the modal instantly but loading whilst waiting for our data.\r\n                let bodyPromiseResolver;\r\n                const bodyPromise = new Promise(resolve => {\r\n                    bodyPromiseResolver = resolve;\r\n                });\r\n\r\n                const footerData = await fetchFooterData(caller.dataset.sectionid);\r\n                const sectionModal = buildModal(bodyPromise, footerData);\r\n\r\n                // Now we have a modal we should start fetching data.\r\n                const data = await fetchModuleData();\r\n\r\n                // Apply the section id to all the module instance links.\r\n                const builtModuleData = sectionIdMapper(data, caller.dataset.sectionid);\r\n\r\n                ChooserDialogue.displayChooser(\r\n                    sectionModal,\r\n                    builtModuleData,\r\n                    partiallyAppliedFavouriteManager(data, caller.dataset.sectionid),\r\n                    footerData,\r\n                );\r\n\r\n                bodyPromiseResolver(await Templates.render(\r\n                    'core_course/activitychooser',\r\n                    templateDataBuilder(builtModuleData, chooserConfig)\r\n                ));\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Given the web service data and an ID we want to make a deep copy\r\n * of the WS data then add on the section ID to the addoption URL\r\n *\r\n * @method sectionIdMapper\r\n * @param {Object} webServiceData Our original data from the Web service call\r\n * @param {Number} id The ID of the section we need to append to the links\r\n * @return {Array} [modules] with URL's built\r\n */\r\nconst sectionIdMapper = (webServiceData, id) => {\r\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\r\n    const newData = JSON.parse(JSON.stringify(webServiceData));\r\n    newData.content_items.forEach((module) => {\r\n        module.link += '&section=' + id;\r\n    });\r\n    return newData.content_items;\r\n};\r\n\r\n/**\r\n * Given an array of modules we want to figure out where & how to place them into our template object\r\n *\r\n * @method templateDataBuilder\r\n * @param {Array} data our modules to manipulate into a Templatable object\r\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\r\n * @return {Object} Our built object ready to render out\r\n */\r\nconst templateDataBuilder = (data, chooserConfig) => {\r\n    // Setup of various bits and pieces we need to mutate before throwing it to the wolves.\r\n    let activities = [];\r\n    let resources = [];\r\n    let showAll = true;\r\n    let showActivities = false;\r\n    let showResources = false;\r\n\r\n    // Tab mode can be the following [All, Resources & Activities, All & Activities & Resources].\r\n    const tabMode = parseInt(chooserConfig.tabmode);\r\n\r\n    // Filter the incoming data to find favourite & recommended modules.\r\n    const favourites = data.filter(mod => mod.favourite === true);\r\n    const recommended = data.filter(mod => mod.recommended === true);\r\n\r\n    // Both of these modes need Activity & Resource tabs.\r\n    if ((tabMode === ALLACTIVITIESRESOURCES || tabMode === ACTIVITIESRESOURCES) && tabMode !== ONLYALL) {\r\n        // Filter the incoming data to find activities then resources.\r\n        activities = data.filter(mod => mod.archetype === ACTIVITY);\r\n        resources = data.filter(mod => mod.archetype === RESOURCE);\r\n        showActivities = true;\r\n        showResources = true;\r\n\r\n        // We want all of the previous information but no 'All' tab.\r\n        if (tabMode === ACTIVITIESRESOURCES) {\r\n            showAll = false;\r\n        }\r\n    }\r\n\r\n    // Given the results of the above filters lets figure out what tab to set active.\r\n    // We have some favourites.\r\n    const favouritesFirst = !!favourites.length;\r\n    // We are in tabMode 2 without any favourites.\r\n    const activitiesFirst = showAll === false && favouritesFirst === false;\r\n    // We have nothing fallback to show all modules.\r\n    const fallback = showAll === true && favouritesFirst === false;\r\n\r\n    return {\r\n        'default': data,\r\n        showAll: showAll,\r\n        activities: activities,\r\n        showActivities: showActivities,\r\n        activitiesFirst: activitiesFirst,\r\n        resources: resources,\r\n        showResources: showResources,\r\n        favourites: favourites,\r\n        recommended: recommended,\r\n        favouritesFirst: favouritesFirst,\r\n        fallback: fallback,\r\n    };\r\n};\r\n\r\n/**\r\n * Given an object we want to build a modal ready to show\r\n *\r\n * @method buildModal\r\n * @param {Promise} bodyPromise\r\n * @param {String|Boolean} footer Either a footer to add or nothing\r\n * @return {Object} The modal ready to display immediately and render body in later.\r\n */\r\nconst buildModal = (bodyPromise, footer) => {\r\n    return ModalFactory.create({\r\n        type: ModalFactory.types.DEFAULT,\r\n        title: getString('addresourceoractivity'),\r\n        body: bodyPromise,\r\n        footer: footer.customfootertemplate,\r\n        large: true,\r\n        templateContext: {\r\n            classes: 'modchooser'\r\n        }\r\n    })\r\n    .then(modal => {\r\n        modal.show();\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * A small helper function to handle the case where there are no more favourites\r\n * and we need to mess a bit with the available tabs in the chooser\r\n *\r\n * @method nullFavouriteDomManager\r\n * @param {HTMLElement} favouriteTabNav Dom node of the favourite tab nav\r\n * @param {HTMLElement} modalBody Our current modals' body\r\n */\r\nconst nullFavouriteDomManager = (favouriteTabNav, modalBody) => {\r\n    favouriteTabNav.tabIndex = -1;\r\n    favouriteTabNav.classList.add('d-none');\r\n    // Need to set active to an available tab.\r\n    if (favouriteTabNav.classList.contains('active')) {\r\n        favouriteTabNav.classList.remove('active');\r\n        favouriteTabNav.setAttribute('aria-selected', 'false');\r\n        const favouriteTab = modalBody.querySelector(selectors.regions.favouriteTab);\r\n        favouriteTab.classList.remove('active');\r\n        const defaultTabNav = modalBody.querySelector(selectors.regions.defaultTabNav);\r\n        const activitiesTabNav = modalBody.querySelector(selectors.regions.activityTabNav);\r\n        if (defaultTabNav.classList.contains('d-none') === false) {\r\n            defaultTabNav.classList.add('active');\r\n            defaultTabNav.setAttribute('aria-selected', 'true');\r\n            defaultTabNav.tabIndex = 0;\r\n            defaultTabNav.focus();\r\n            const defaultTab = modalBody.querySelector(selectors.regions.defaultTab);\r\n            defaultTab.classList.add('active');\r\n        } else {\r\n            activitiesTabNav.classList.add('active');\r\n            activitiesTabNav.setAttribute('aria-selected', 'true');\r\n            activitiesTabNav.tabIndex = 0;\r\n            activitiesTabNav.focus();\r\n            const activitiesTab = modalBody.querySelector(selectors.regions.activityTab);\r\n            activitiesTab.classList.add('active');\r\n        }\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Export a curried function where the builtModules has been applied.\r\n * We have our array of modules so we can rerender the favourites area and have all of the items sorted.\r\n *\r\n * @method partiallyAppliedFavouriteManager\r\n * @param {Array} moduleData This is our raw WS data that we need to manipulate\r\n * @param {Number} sectionId We need this to add the sectionID to the URL's in the faves area after rerender\r\n * @return {Function} partially applied function so we can manipulate DOM nodes easily & update our internal array\r\n */\r\n\r\n const showModuleHelp = (carousel, moduleData, modal = null) => {\r\n    // If we have a real footer then we need to change temporarily.\r\n    if (modal !== null && moduleData.showFooter === true) {\r\n        modal.setFooter(Templates.render('core_course/local/activitychooser/footer_partial', moduleData));\r\n    }\r\n    const help = carousel.find(selectors.regions.help)[0];\r\n    help.innerHTML = '';\r\n    help.classList.add('m-auto');\r\n\r\n    // Add a spinner.\r\n    const spinnerPromise = addIconToContainer(help);\r\n\r\n    // Used later...\r\n    let transitionPromiseResolver = null;\r\n    const transitionPromise = new Promise(resolve => {\r\n        transitionPromiseResolver = resolve;\r\n    });\r\n\r\n    // Build up the html & js ready to place into the help section.\r\n    const contentPromise = Templates.renderForPromise('core_course/local/activitychooser/help', moduleData);\r\n\r\n    // Wait for the content to be ready, and for the transition to be complet.\r\n    Promise.all([contentPromise, spinnerPromise, transitionPromise])\r\n        .then(([{html, js}]) => Templates.replaceNodeContents(help, html, js))\r\n        .then(() => {\r\n            help.querySelector(selectors.regions.chooserSummary.header).focus();\r\n            return help;\r\n        })\r\n        .catch(Notification.exception);\r\n\r\n    // Move to the next slide, and resolve the transition promise when it's done.\r\n    carousel.one('slid.bs.carousel', () => {\r\n        transitionPromiseResolver();\r\n    });\r\n    // Trigger the transition between 'pages'.\r\n    carousel.carousel('next');\r\n};\r\n\r\nconst partiallyAppliedFavouriteManager = (moduleData, sectionId) => {\r\n    /**\r\n     * Curried function that is being returned.\r\n     *\r\n     * @param {String} internal Internal name of the module to manage\r\n     * @param {Boolean} favourite Is the caller adding a favourite or removing one?\r\n     * @param {HTMLElement} modalBody What we need to update whilst we are here\r\n     */\r\n    return async(internal, favourite, modalBody) => {\r\n        const favouriteArea = modalBody.querySelector(selectors.render.favourites);\r\n\r\n        // eslint-disable-next-line max-len\r\n        const favouriteButtons = modalBody.querySelectorAll(`[data-internal=\"${internal}\"] ${selectors.actions.optionActions.manageFavourite}`);\r\n        const favouriteTabNav = modalBody.querySelector(selectors.regions.favouriteTabNav);\r\n        const result = moduleData.content_items.find(({name}) => name === internal);\r\n        const newFaves = {};\r\n        if (result) {\r\n            if (favourite) {\r\n                result.favourite = true;\r\n\r\n                // eslint-disable-next-line camelcase\r\n                newFaves.content_items = moduleData.content_items.filter(mod => mod.favourite === true);\r\n\r\n                const builtFaves = sectionIdMapper(newFaves, sectionId);\r\n\r\n                const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/favourites',\r\n                    {favourites: builtFaves});\r\n\r\n                await Templates.replaceNodeContents(favouriteArea, html, js);\r\n\r\n                Array.from(favouriteButtons).forEach((element) => {\r\n                    element.classList.remove('text-muted');\r\n                    element.classList.add('text-primary');\r\n                    element.dataset.favourited = 'true';\r\n                    element.setAttribute('aria-pressed', true);\r\n                    element.firstElementChild.classList.remove('fa-star-o');\r\n                    element.firstElementChild.classList.add('fa-star');\r\n                });\r\n\r\n                favouriteTabNav.classList.remove('d-none');\r\n            } else {\r\n                result.favourite = false;\r\n\r\n                const nodeToRemove = favouriteArea.querySelector(`[data-internal=\"${internal}\"]`);\r\n\r\n                nodeToRemove.parentNode.removeChild(nodeToRemove);\r\n\r\n                Array.from(favouriteButtons).forEach((element) => {\r\n                    element.classList.add('text-muted');\r\n                    element.classList.remove('text-primary');\r\n                    element.dataset.favourited = 'false';\r\n                    element.setAttribute('aria-pressed', false);\r\n                    element.firstElementChild.classList.remove('fa-star');\r\n                    element.firstElementChild.classList.add('fa-star-o');\r\n                });\r\n                const newFaves = moduleData.content_items.filter(mod => mod.favourite === true);\r\n\r\n                if (newFaves.length === 0) {\r\n                    nullFavouriteDomManager(favouriteTabNav, modalBody);\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\n"],"file":"activitychooser.min.js"}